class Node(object):
      def __init__(self, value):
          self.value=value
          self.next=None
          self.prev=None
 
class List(object):
      def __init__(self):
          self.head=None
          self.tail=None
      def insert(self,n,x):
          #Not actually perfect: how do we prepend to an existing list?
          if n!=None:
              x.next=n.next
              n.next=x
              x.prev=n
              if x.next!=None:
                  x.next.prev=x              
          if self.head==None:
              self.head=self.tail=x
              x.prev=x.next=None
          elif self.tail==n:
              self.tail=x
      def display(self):
          values=[]
          n=self.head
          while n!=None:
              values.append(str(n.value))
              n=n.next
              print ("List: ", ",".join(values))
              
      def remove(self, n):
            if n.prev != None:
                  n.prev.next = n.next
            else:
                  l.head = n.next
            if n.next != None:
                  n.next.prev = n.prev
            else:
                  l.tail = n.prev

       
if __name__ == '__main__':
      l=List()
      n1 = Node(8)
      n3 = Node(2)
      l.insert(None, n1)
      l.insert(l.head,Node(6))
      l.insert(l.head,n3)
      l.insert(l.tail,Node(7))
      l.display()
      l.remove(n3)
      l.display()
      

